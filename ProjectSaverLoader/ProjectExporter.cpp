//
// Created by binybrion on 5/20/20.
//

#include <QtCore/QFile>
#include <QtCore/QTextStream>
#include "ProjectExporter.h"
#include "Render/DataStructures/StoredModels.h"

namespace ProjectSaverLoader
{

    void ProjectExporter::exportModelInstances(const QString &exportLocation,
                                                const ::Render::DataStructures::StoredModels &storedModels,
                                                const std::vector<glm::mat4x4> &instanceMatrices)
    {
        exportFile.setFileName(exportLocation);

        if(!exportFile.open(QIODevice::WriteOnly))
        {
            throw std::runtime_error{"Could not create a file by the name of: " + exportLocation.toStdString() + " for exporting!\n"};
        }

        for(const auto &i : storedModels.getModelRanges())
        {
            writeModelName(i.getModel().getModelFileName());

            // Remember that the instance matrix count includes both instance matrices generated by an L-Script interpretation
            // as well as instance matrices added by the user.
            for(unsigned int index = 0; index < i.getInstanceMatrixCount(); ++index)
            {
                // The value of index + the index of the beginning of the instance matrices for the current model
                // is an index into the vector of instance matrices holding all of the instance matrices for the render.
                writeInstanceMatrix(instanceMatrices[index + i.getInstanceMatrixBegin()]);
            }
        }
    }

    void ProjectExporter::writeInstanceMatrix(const glm::mat4x4 &matrix)
    {
        QTextStream writeStream{&exportFile};

        // Identifiers stating the beginning and end of the written matrix helps when reading the matrix back from a file.
        writeStream << "Begin_Matrix\n\n";

        for(int columnIndex = 0; columnIndex < 4; ++columnIndex)
        {
            writeStream << matrix[columnIndex][0] << " , " << matrix[columnIndex][1] << " , " << matrix[columnIndex][2] << " , " << matrix[columnIndex][3] << "\n";
        }

        writeStream << "\nEnd_Matrix\n\n";
    }

    void ProjectExporter::writeModelName(const QString &modelName)
    {
        QTextStream writeStream{&exportFile};

        writeStream << "Model Name: " << modelName << "\n\n";
    }
}